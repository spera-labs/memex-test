{
  "address": "0x0f2f4C29861B6B3E1A66b340c5040493FaF334F4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FailedDeployment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeWithdrawalFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientDeploymentFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDeploymentParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFeesToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefundFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenMintingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "virtualEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preBondingTarget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondingTarget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minContribution",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "poolFee",
          "type": "uint24"
        }
      ],
      "name": "BondingCurveSettingsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondingCurveAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "BondingCurveSystemDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "DeploymentFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "deployBondingCurveSystem",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bondingCurveAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBondingCurveForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondingCurveImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondingCurveSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "virtualEth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preBondingTarget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bondingTarget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "sellFee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "uniswapV3Factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeTo",
              "type": "address"
            }
          ],
          "internalType": "struct IFactory.BondingCurveSettings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeploymentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bondingCurve",
          "type": "address"
        }
      ],
      "name": "getTokenForBondingCurve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "factoryFees",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bondingCurveImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockContractAddr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "virtualEth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preBondingTarget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bondingTarget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "sellFee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "uniswapV3Factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeTo",
              "type": "address"
            }
          ],
          "internalType": "struct IFactory.BondingCurveSettings",
          "name": "initialSettings",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "virtualEth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preBondingTarget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bondingTarget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "sellFee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "uniswapV3Factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeTo",
              "type": "address"
            }
          ],
          "internalType": "struct IFactory.BondingCurveSettings",
          "name": "newSettings",
          "type": "tuple"
        }
      ],
      "name": "updateBondingCurveSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "updateDeploymentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
  "receipt": {
    "to": null,
    "from": "0x8b3CA5BaB7E1ff6092F30F4063a3305bf3983a7c",
    "contractAddress": "0x0f2f4C29861B6B3E1A66b340c5040493FaF334F4",
    "transactionIndex": 0,
    "gasUsed": "1073063",
    "logsBloom": "0x
    "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c",
    "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10280458,
        "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
        "address": "0x000000000000000000000000000000000000800A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000008b3ca5bab7e1ff6092f30f4063a3305bf3983a7c",
          "0x0000000000000000000000000000000000000000000000000000000000008001"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000eb5ffb25a4ee",
        "logIndex": 0,
        "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10280458,
        "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
        "address": "0x000000000000000000000000000000000000800A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000008001",
          "0x0000000000000000000000008b3ca5bab7e1ff6092f30f4063a3305bf3983a7c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000031665127816e",
        "logIndex": 1,
        "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10280458,
        "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
        "address": "0x0f2f4C29861B6B3E1A66b340c5040493FaF334F4",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10280458,
        "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
        "address": "0x0000000000000000000000000000000000008008",
        "topics": [
          "0x27fe8c0b49f49507b9d4fe5968c9f49edfe5c9df277d433a07a0717ede97638d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000ba0000000000000000000000000000000000000000000000000000000000008008000000000000000000000000000000000000000000000000000000000000800414c8dcaae69a4bdd697f746e53239239a70756e1a4938cd8c007a074aed25ed2",
        "logIndex": 3,
        "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10280458,
        "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
        "address": "0x0000000000000000000000000000000000008008",
        "topics": [
          "0x3a36e47291f4201faf137fab081d92295bce2d53be2c6ca68ba82c7faa9ce241",
          "0x0000000000000000000000000000000000000000000000000000000000008004",
          "0x14c8dcaae69a4bdd697f746e53239239a70756e1a4938cd8c007a074aed25ed2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000015e06080604052600436106101025760003560e01c806379ba509711610095578063c70ff3a011610064578063c70ff3a01461039e578063d0c05a92146103be578063e30c3978146103dc578063f1f7c6fc146103f1578063f2fde38b1461040f57600080fd5b806379ba50971461024a5780638da5cb5b1461025f578063a290566814610274578063b2834bb11461036557600080fd5b806355896f9c116100d157806355896f9c14610193578063593726b6146101c6578063709bc7f314610217578063715018a61461023557600080fd5b8063164e68de1461010e578063432c60581461013057806346c549cc14610150578063499200db1461017357600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e6101293660046110c6565b61042f565b005b34801561013c57600080fd5b5061012e61014b366004611103565b61053c565b34801561015c57600080fd5b506003546040519081526020015b60405180910390f35b34801561017f57600080fd5b5061012e61018e366004611120565b610607565b6101a66101a1366004611182565b610654565b604080516001600160a01b0393841681529290911660208301520161016a565b3480156101d257600080fd5b506101ff6101e13660046110c6565b6001600160a01b039081166000908152600d60205260409020541690565b6040516001600160a01b03909116815260200161016a565b34801561022357600080fd5b506000546001600160a01b03166101ff565b34801561024157600080fd5b5061012e610a8d565b34801561025657600080fd5b5061012e610aa1565b34801561026b57600080fd5b506101ff610ae9565b34801561028057600080fd5b506103586040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091525060408051610140810182526004548152600554602082015260065491810191909152600754606082015260085462ffffff8082166080840152630100000082041660a08301526001600160a01b036601000000000000909104811660c0830152600954811660e0830152600a548116610100830152600b541661012082015290565b60405161016a91906111ee565b34801561037157600080fd5b506101ff6103803660046110c6565b6001600160a01b039081166000908152600c60205260409020541690565b3480156103aa57600080fd5b5061012e6103b93660046112a9565b610b1e565b3480156103ca57600080fd5b506002546001600160a01b03166101ff565b3480156103e857600080fd5b506101ff610d67565b3480156103fd57600080fd5b506001546001600160a01b03166101ff565b34801561041b57600080fd5b5061012e61042a3660046110c6565b610d90565b610437610e15565b6001600160a01b03811661045e5760405163d92e233d60e01b815260040160405180910390fd5b47600081900361048157604051630d00db4d60e31b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146104ce576040519150601f19603f3d011682016040523d82523d6000602084013e6104d3565b606091505b50509050806104f457604051620b587d60e91b815260040160405180910390fd5b826001600160a01b03167fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a8360405161052f91815260200190565b60405180910390a2505050565b610544610e15565b806004610551828261136b565b506064905061056282356014611482565b61056c9190611499565b600581905560065411610592576040516308429e4760e31b815260040160405180910390fd5b7fe4565e87b65527c59a6c2aa2549087a9ccc59d3f74601cad058f3c704018150c81356020830135604084013560608501356105d460a08701608088016114bb565b60408051958652602086019490945292840191909152606083015262ffffff16608082015260a00160405180910390a150565b61060f610e15565b600380549082905560408051828152602081018490527fbade80ae0982a2d3106c4f5afa708793d20a9d6441a6440011f99e9f69ad5f3c910160405180910390a15050565b60008061065f610e47565b60035434101561069457600354604051632e1932e360e11b815234600482015260248101919091526044015b60405180910390fd5b84158061069f575082155b156106bd576040516308429e4760e31b815260040160405180910390fd5b6000546106d2906001600160a01b0316610e91565b91506000826001600160a01b0316878787876040516024016106f79493929190611501565b60408051601f198184030181529181526020820180516001600160e01b031663266c45bb60e11b1790525161072c9190611533565b6000604051808303816000865af19150503d8060008114610769576040519150601f19603f3d011682016040523d82523d6000602084013e61076e565b606091505b505090508061079057604051630337323560e31b815260040160405180910390fd5b6001546107a5906001600160a01b0316610e91565b6002546040516301434e2360e21b81526001600160a01b03868116600480840191909152928116602483015233604483015291546064820152600554608482015260065460a482015260075460c482015260085462ffffff80821660e4840152601882901c1661010483015260301c82166101248201526009548216610144820152600a548216610164820152600b54821661018482015291935083169063050d388c906101a401600060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b50506040516001600160a01b038581166024830152600093508616915060440160408051601f198184030181529181526020820180516001600160e01b03166305a950c560e21b179052516108d09190611533565b6000604051808303816000865af19150503d806000811461090d576040519150601f19603f3d011682016040523d82523d6000602084013e610912565b606091505b505090508061093457604051632907f5df60e11b815260040160405180910390fd5b6001600160a01b038085166000818152600c6020908152604080832080549589166001600160a01b031996871681179091558352600d9091529020805490921617905561097e3390565b6001600160a01b0316846001600160a01b0316846001600160a01b03167f3ef4c1f0529a2ee6b2e04f4f81ace41250f87a6d1ecc603d9168c55780c890fb8b8b8b8b6040516109d09493929190611501565b60405180910390a4600354341115610a595760035460009033906109f49034611562565b604051600081818185875af1925050503d8060008114610a30576040519150601f19603f3d011682016040523d82523d6000602084013e610a35565b606091505b5050905080610a5757604051633c31275160e21b815260040160405180910390fd5b505b5050610a8460017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b94509492505050565b610a95610e15565b610a9f6000610eca565b565b3380610aab610d67565b6001600160a01b031614610add5760405163118cdaa760e01b81526001600160a01b038216600482015260240161068b565b610ae681610eca565b50565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b645750825b905060008267ffffffffffffffff166001148015610b815750303b155b905081158015610b8f575080155b15610bad5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610bd757845460ff60401b1916600160401b1785555b6001600160a01b038a16610bfe5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038916610c255760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038816610c4c5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038716610c735760405163d92e233d60e01b815260040160405180910390fd5b610c7c8a610f06565b610c84610f17565b600080546001600160a01b03808c166001600160a01b031992831617909255600180548b841690831617905560028054928a1692909116919091179055856004610cce828261136b565b5060649050610cdf87356014611482565b610ce99190611499565b600581905560065411610d0f576040516308429e4760e31b815260040160405180910390fd5b60038b90558315610d5a57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610b0e565b610d98610e15565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255610ddc610ae9565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b33610e1e610ae9565b6001600160a01b031614610a9f5760405163118cdaa760e01b815233600482015260240161068b565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610e8b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000610e9e826000610f27565b92915050565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610f0282610fbd565b5050565b610f0e61102e565b610ae681611077565b610f1f61102e565b610a9f6110a9565b600081471015610f535760405163cf47918160e01b81524760048201526024810183905260440161068b565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b038116610e9e5760405163b06ebf3d60e01b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a9f57604051631afcd79f60e31b815260040160405180910390fd5b61107f61102e565b6001600160a01b038116610add57604051631e4fbdf760e01b81526000600482015260240161068b565b610ea461102e565b6001600160a01b0381168114610ae657600080fd5b6000602082840312156110d857600080fd5b81356110e3816110b1565b9392505050565b600061014082840312156110fd57600080fd5b50919050565b6000610140828403121561111657600080fd5b6110e383836110ea565b60006020828403121561113257600080fd5b5035919050565b60008083601f84011261114b57600080fd5b50813567ffffffffffffffff81111561116357600080fd5b60208301915083602082850101111561117b57600080fd5b9250929050565b6000806000806040858703121561119857600080fd5b843567ffffffffffffffff808211156111b057600080fd5b6111bc88838901611139565b909650945060208701359150808211156111d557600080fd5b506111e287828801611139565b95989497509550505050565b60006101408201905082518252602083015160208301526040830151604083015260608301516060830152608083015161122f608084018262ffffff169052565b5060a083015161124660a084018262ffffff169052565b5060c083015161126160c08401826001600160a01b03169052565b5060e083015161127c60e08401826001600160a01b03169052565b50610100838101516001600160a01b03908116918401919091526101209384015116929091019190915290565b6000806000806000806101e087890312156112c357600080fd5b8635955060208701356112d5816110b1565b945060408701356112e5816110b1565b935060608701356112f5816110b1565b92506080870135611305816110b1565b91506113148860a089016110ea565b90509295509295509295565b62ffffff81168114610ae657600080fd5b60008135610e9e81611320565b60008135610e9e816110b1565b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013560018201556040820135600282015560608201356003820155600481016113b56113a060808501611331565b825462ffffff191662ffffff91909116178255565b6113e26113c460a08501611331565b825465ffffff000000191660189190911b65ffffff00000016178255565b6114216113f160c0850161133e565b8280546601000000000000600160d01b03191660309290921b6601000000000000600160d01b0316919091179055565b5061143a61143160e0840161133e565b6005830161134b565b61145361144a610100840161133e565b6006830161134b565b610f02611463610120840161133e565b6007830161134b565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610e9e57610e9e61146c565b6000826114b657634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156114cd57600080fd5b81356110e381611320565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006115156040830186886114d8565b82810360208401526115288185876114d8565b979650505050505050565b6000825160005b81811015611554576020818601810151858301520161153a565b506000920191825250919050565b81810381811115610e9e57610e9e61146c56fea2646970667358221220e73a5ae4186fea1054b4a8ab1b896b6ece62f2a7379b8f18016d9ee014e6521164736f6c634300081400330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10280458,
        "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
        "address": "0x0000000000000000000000000000000000008004",
        "topics": [
          "0xc94722ff13eacf53547c4741dab5228353a05938ffcdd5d4a2d533ae0e618287",
          "0x020015ab9fb571d4bd150176703c249ffee40b2d239658186f221e821a06f310",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10280458,
        "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
        "address": "0x0000000000000000000000000000000000008006",
        "topics": [
          "0x290afdae231a3fc0bbae8b1af63698b0a1d79b21ad17df0342dfb952fe74f8e5",
          "0x0000000000000000000000008b3ca5bab7e1ff6092f30f4063a3305bf3983a7c",
          "0x020015ab9fb571d4bd150176703c249ffee40b2d239658186f221e821a06f310",
          "0x0000000000000000000000000f2f4c29861b6b3e1a66b340c5040493faf334f4"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10280458,
        "transactionHash": "0xacf7452d750efe6af7c979bcec30fac2c9fd114a473ca90d0f1cbf5b6fe519cb",
        "address": "0x000000000000000000000000000000000000800A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000008001",
          "0x0000000000000000000000008b3ca5bab7e1ff6092f30f4063a3305bf3983a7c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000a1939d84f1c0",
        "logIndex": 7,
        "blockHash": "0xebf91c80475200b62d006417171e6909121d88d6c54ca44a16ad7e464e96451c"
      }
    ],
    "blockNumber": 10280458,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "241d2a36009e5f3b5539b7fb7f9face7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeWithdrawalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientDeploymentFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeploymentParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFeesToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMintingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"virtualEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preBondingTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondingTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"name\":\"BondingCurveSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondingCurveAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"BondingCurveSystemDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"DeploymentFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"deployBondingCurveSystem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondingCurveAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBondingCurveForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondingCurveImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondingCurveSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"virtualEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBondingTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondingTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"uniswapV3Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.BondingCurveSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeploymentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bondingCurve\",\"type\":\"address\"}],\"name\":\"getTokenForBondingCurve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"factoryFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondingCurveImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockContractAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"virtualEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBondingTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondingTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"uniswapV3Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.BondingCurveSettings\",\"name\":\"initialSettings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"virtualEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBondingTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondingTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"uniswapV3Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.BondingCurveSettings\",\"name\":\"newSettings\",\"type\":\"tuple\"}],\"name\":\"updateBondingCurveSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateDeploymentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Implements minimal proxy pattern for gas-efficient deployment\",\"errors\":{\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"InsufficientDeploymentFee(uint256,uint256)\":[{\"params\":{\"provided\":\"The amount of ETH provided\",\"required\":\"The required deployment fee\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"BondingCurveSystemDeployed(address,address,address,string,string)\":{\"params\":{\"bondingCurveAddress\":\"The address of the deployed bonding curve\",\"name\":\"Token name\",\"owner\":\"The address that will own both contracts\",\"symbol\":\"Token symbol\",\"tokenAddress\":\"The address of the deployed token\"}},\"DeploymentFeeUpdated(uint256,uint256)\":{\"params\":{\"newFee\":\"New fee amount\",\"oldFee\":\"Previous fee amount\"}},\"FeesWithdrawn(address,uint256)\":{\"params\":{\"amount\":\"Amount withdrawn\",\"recipient\":\"Address receiving the fees\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"details\":\"Constructor is disabled since this contract is meant to be used behind a proxy\"},\"deployBondingCurveSystem(string,string)\":{\"params\":{\"name\":\"Token name\",\"symbol\":\"Token symbol\"},\"returns\":{\"bondingCurveAddress\":\"Address of the deployed bonding curve\",\"tokenAddress\":\"Address of the deployed token contract\"}},\"getBondingCurveForToken(address)\":{\"params\":{\"token\":\"The token address to query\"},\"returns\":{\"_0\":\"The associated bonding curve address\"}},\"getBondingCurveImplementation()\":{\"returns\":{\"_0\":\"Address of the bonding curve implementation contract\"}},\"getDeploymentFee()\":{\"returns\":{\"_0\":\"Current fee amount in wei\"}},\"getLockContract()\":{\"returns\":{\"_0\":\"Address of the LP NFT lock contract\"}},\"getTokenForBondingCurve(address)\":{\"params\":{\"bondingCurve\":\"The bonding curve address to query\"},\"returns\":{\"_0\":\"The associated token address\"}},\"getTokenImplementation()\":{\"returns\":{\"_0\":\"Address of the token implementation contract\"}},\"initialize(uint256,address,address,address,address,(uint256,uint256,uint256,uint256,uint24,uint24,address,address,address,address))\":{\"params\":{\"bondingCurveImpl\":\"Address of the bonding curve implementation\",\"lockContract\":\"Address of the LP NFT lock contract\",\"owner\":\"Address that will own the factory\",\"tokenImpl\":\"Address of the token implementation\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\"},\"updateDeploymentFee(uint256)\":{\"params\":{\"newFee\":\"New fee amount in wei\"}},\"withdrawFees(address)\":{\"params\":{\"recipient\":\"Address to receive the fees\"}}},\"title\":\"Factory\",\"version\":1},\"userdoc\":{\"errors\":{\"InitializationFailed()\":[{\"notice\":\"Thrown when initialization fails\"}],\"InsufficientDeploymentFee(uint256,uint256)\":[{\"notice\":\"Thrown when deployment fee is insufficient\"}],\"InvalidDeploymentParameters()\":[{\"notice\":\"Thrown when deployment parameters are invalid\"}],\"RefundFailed()\":[{\"notice\":\"Thrown when deployment extra fees refund fails\"}],\"TokenMintingFailed()\":[{\"notice\":\"Thrown when deployment minting fails\"}],\"Unauthorized()\":[{\"notice\":\"Thrown when caller is not authorized\"}],\"ZeroAddress()\":[{\"notice\":\"Thrown when an address parameter is zero\"}]},\"events\":{\"BondingCurveSystemDeployed(address,address,address,string,string)\":{\"notice\":\"Emitted when a new bonding curve system is deployed\"},\"DeploymentFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when deployment fee is updated\"},\"FeesWithdrawn(address,uint256)\":{\"notice\":\"Emitted when fees are withdrawn\"}},\"kind\":\"user\",\"methods\":{\"deployBondingCurveSystem(string,string)\":{\"notice\":\"Deploy a complete bonding curve system (token + bonding curve)\"},\"getBondingCurveForToken(address)\":{\"notice\":\"Get the bonding curve address associated with a token\"},\"getBondingCurveImplementation()\":{\"notice\":\"Get the bonding curve implementation address\"},\"getDeploymentFee()\":{\"notice\":\"Get the current deployment fee\"},\"getLockContract()\":{\"notice\":\"Get the LP NFT lock contract address\"},\"getTokenForBondingCurve(address)\":{\"notice\":\"Get the token address associated with a bonding curve\"},\"getTokenImplementation()\":{\"notice\":\"Get the token implementation address\"},\"initialize(uint256,address,address,address,address,(uint256,uint256,uint256,uint256,uint24,uint24,address,address,address,address))\":{\"notice\":\"Initialize the factory contract\"},\"updateDeploymentFee(uint256)\":{\"notice\":\"Update the deployment fee\"},\"withdrawFees(address)\":{\"notice\":\"Withdraw collected fees\"}},\"notice\":\"Factory contract for deploying bonding curve systems\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     *\\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe9570c90b688339474e80090b0cdf0b2c85c25aa28cc6044d489dda9efc2c716\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        return clone(implementation, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\\n     * to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function clone(address implementation, uint256 value) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(value, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        return cloneDeterministic(implementation, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\\n     * a `value` parameter to send native currency to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(value, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf55d01dac75cffdabec6833a79bf3be0c108fc0db10e273daf7adfd3e9e59dae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./interfaces/IBondingCurve.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\n/**\\n * @title Factory\\n * @notice Factory contract for deploying bonding curve systems\\n * @dev Implements minimal proxy pattern for gas-efficient deployment\\n */\\ncontract Factory is\\n    IFactory,\\n    Initializable,\\n    Ownable2StepUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using Clones for address;\\n\\n    // State variables\\n    address private tokenImplementation;\\n    address private bondingCurveImplementation;\\n    address private lockContract;\\n    uint256 private deploymentFee;\\n    BondingCurveSettings private settings;\\n    // Deployment tracking\\n    mapping(address => address) private tokenToBondingCurve;\\n    mapping(address => address) private bondingCurveToToken;\\n\\n    /**\\n     * @dev Constructor is disabled since this contract is meant to be used behind a proxy\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @inheritdoc IFactory\\n     */\\n    function initialize(\\n        uint256 factoryFees,\\n        address owner,\\n        address tokenImpl,\\n        address bondingCurveImpl,\\n        address lockContractAddr,\\n        BondingCurveSettings calldata initialSettings\\n    ) external initializer {\\n        if (owner == address(0)) revert ZeroAddress();\\n        if (tokenImpl == address(0)) revert ZeroAddress();\\n        if (bondingCurveImpl == address(0)) revert ZeroAddress();\\n        if (lockContractAddr == address(0)) revert ZeroAddress();\\n\\n        __Ownable_init(owner);\\n        __ReentrancyGuard_init();\\n\\n        tokenImplementation = tokenImpl;\\n        bondingCurveImplementation = bondingCurveImpl;\\n        lockContract = lockContractAddr;\\n        settings = initialSettings;\\n        settings.preBondingTarget = (initialSettings.virtualEth * 20) / 100;\\n        if (settings.bondingTarget <= settings.preBondingTarget)\\n            revert InvalidDeploymentParameters();\\n        deploymentFee = factoryFees;\\n    }\\n\\n    function updateBondingCurveSettings(\\n        BondingCurveSettings calldata newSettings\\n    ) external onlyOwner {\\n        // Update settings\\n        settings = newSettings;\\n        settings.preBondingTarget = (newSettings.virtualEth * 20) / 100;\\n        if (settings.bondingTarget <= settings.preBondingTarget)\\n            revert InvalidDeploymentParameters();\\n        emit BondingCurveSettingsUpdated(\\n            newSettings.virtualEth,\\n            newSettings.preBondingTarget,\\n            newSettings.bondingTarget,\\n            newSettings.minContribution,\\n            newSettings.poolFee\\n        );\\n    }\\n\\n    function getBondingCurveSettings()\\n        external\\n        view\\n        returns (BondingCurveSettings memory)\\n    {\\n        return settings;\\n    }\\n\\n    /**\\n     * @inheritdoc IFactory\\n     */\\n    function deployBondingCurveSystem(\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns (address tokenAddress, address bondingCurveAddress)\\n    {\\n        // Validate deployment fee\\n        if (msg.value < deploymentFee) {\\n            revert InsufficientDeploymentFee(msg.value, deploymentFee);\\n        }\\n\\n        // Validate parameters\\n        if (bytes(name).length == 0 || bytes(symbol).length == 0) {\\n            revert InvalidDeploymentParameters();\\n        }\\n\\n        // Deploy token contract\\n        tokenAddress = tokenImplementation.clone();\\n\\n        // Initialize token with  _msgSender() as owner\\n        (bool tokenSuccess, ) = tokenAddress.call(\\n            abi.encodeWithSignature(\\\"initialize(string,string)\\\", name, symbol)\\n        );\\n        if (!tokenSuccess) revert InitializationFailed();\\n\\n        // Deploy bonding curve contract\\n        bondingCurveAddress = bondingCurveImplementation.clone();\\n\\n        // Initialize bonding curve\\n        IBondingCurve(bondingCurveAddress).initialize(\\n            tokenAddress,\\n            lockContract,\\n            _msgSender(),\\n            settings\\n        );\\n\\n        // Mint total supply to the bonding curve contract\\n        (bool mintSuccess, ) = tokenAddress.call(\\n            abi.encodeWithSignature(\\n                \\\"mintTotalSupply(address)\\\",\\n                bondingCurveAddress\\n            )\\n        );\\n        if (!mintSuccess) revert TokenMintingFailed();\\n\\n        // Store the relationship between token and bonding curve\\n        tokenToBondingCurve[tokenAddress] = bondingCurveAddress;\\n        bondingCurveToToken[bondingCurveAddress] = tokenAddress;\\n\\n        emit BondingCurveSystemDeployed(\\n            bondingCurveAddress,\\n            tokenAddress,\\n            _msgSender(),\\n            name,\\n            symbol\\n        );\\n\\n        // Refund excess deployment fee\\n        if (msg.value > deploymentFee) {\\n            (bool refundSuccess, ) = _msgSender().call{\\n                value: msg.value - deploymentFee\\n            }(\\\"\\\");\\n            if (!refundSuccess) revert RefundFailed();\\n        }\\n\\n        return (tokenAddress, bondingCurveAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc IFactory\\n     */\\n    function updateDeploymentFee(uint256 newFee) external onlyOwner {\\n        uint256 oldFee = deploymentFee;\\n        deploymentFee = newFee;\\n        emit DeploymentFeeUpdated(oldFee, newFee);\\n    }\\n\\n    /**\\n     * @inheritdoc IFactory\\n     */\\n    function withdrawFees(address recipient) external onlyOwner {\\n        if (recipient == address(0)) revert ZeroAddress();\\n\\n        uint256 balance = address(this).balance;\\n        if (balance == 0) revert NoFeesToWithdraw();\\n\\n        (bool success, ) = recipient.call{value: balance}(\\\"\\\");\\n        if (!success) revert FeeWithdrawalFailed();\\n\\n        emit FeesWithdrawn(recipient, balance);\\n    }\\n\\n    /**\\n     * @inheritdoc IFactory\\n     */\\n    function getDeploymentFee() external view returns (uint256) {\\n        return deploymentFee;\\n    }\\n\\n    /**\\n     * @inheritdoc IFactory\\n     */\\n    function getTokenImplementation() external view returns (address) {\\n        return tokenImplementation;\\n    }\\n\\n    /**\\n     * @inheritdoc IFactory\\n     */\\n    function getBondingCurveImplementation() external view returns (address) {\\n        return bondingCurveImplementation;\\n    }\\n\\n    /**\\n     * @inheritdoc IFactory\\n     */\\n    function getLockContract() external view returns (address) {\\n        return lockContract;\\n    }\\n\\n    /**\\n     * @notice Get the bonding curve address associated with a token\\n     * @param token The token address to query\\n     * @return The associated bonding curve address\\n     */\\n    function getBondingCurveForToken(\\n        address token\\n    ) external view returns (address) {\\n        return tokenToBondingCurve[token];\\n    }\\n\\n    /**\\n     * @notice Get the token address associated with a bonding curve\\n     * @param bondingCurve The bonding curve address to query\\n     * @return The associated token address\\n     */\\n    function getTokenForBondingCurve(\\n        address bondingCurve\\n    ) external view returns (address) {\\n        return bondingCurveToToken[bondingCurve];\\n    }\\n\\n    /**\\n     * @dev Required for the contract to receive ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x1cb8e7d880a957aefba0b16bc305fac7f3abd40a88578b5b0e1f08bb7db0d5d1\",\"license\":\"MIT\"},\"contracts/interfaces/IBondingCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"./IFactory.sol\\\";\\n\\n/**\\n * @title IBondingCurve\\n * @notice Interface for the bonding curve contract that manages token distribution and liquidity\\n * @dev Implements constant product AMM formula with pre-bonding and bonding phases\\n */\\ninterface IBondingCurve {\\n    // Custom Errors\\n    error ZeroAddress();\\n    error InitializationFailed();\\n    error PreBondingTargetReached();\\n    error BondingTargetReached();\\n    error ContributionTooLow();\\n    error InvalidPhase();\\n    error TokensLocked();\\n    error TokensNotLocked();\\n    error InsufficientTokens();\\n    error InsufficientETH();\\n    error SlippageExceeded();\\n    error TransferFailed();\\n    error CannotFinalizeYet();\\n    error AlreadyFinalized();\\n    error NoFeesToWithdraw();\\n\\n    // Events\\n    event PreBondingContribution(\\n        address indexed contributor,\\n        uint256 amount,\\n        uint256 tokenAmount\\n    );\\n\\n    event PreBondingCompleted(uint256 totalContributed, uint256 totalTokens);\\n\\n    event TokensUnlocked(address indexed account);\\n\\n    event TokensPurchased(\\n        address indexed buyer,\\n        uint256 ethAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    event TokensSold(\\n        address indexed seller,\\n        uint256 tokenAmount,\\n        uint256 ethAmount,\\n        uint256 fee\\n    );\\n\\n    event CurveFinalized(\\n        address indexed uniswapPool,\\n        uint256 indexed lpTokenId\\n    );\\n\\n    event FeesWithdrawn(uint256 amount);\\n\\n    // State-Changing Functions\\n    /**\\n     * @notice Initialize the bonding curve contract\\n     * @param token_ Address of the ERC20 token\\n     * @param lock_ Address of the LP NFT lock contract\\n     * @param owner_ Address that will own the contract\\n     */\\n    // Update initialize function\\n    function initialize(\\n        address token_,\\n        address lock_,\\n        address owner_,\\n        IFactory.BondingCurveSettings calldata settings_\\n    ) external;\\n\\n    /**\\n     * @notice Contribute ETH during pre-bonding phase\\n     */\\n    function contributePreBonding() external payable;\\n\\n    /**\\n     * @notice Buy tokens during bonding phase\\n     * @param minTokens Minimum tokens to receive (slippage protection)\\n     */\\n    function buyTokens(\\n        uint256 minTokens\\n    ) external payable returns (uint256 tokensToReceive);\\n\\n    /**\\n     * @notice Sell tokens during bonding phase\\n     * @param tokenAmount Amount of tokens to sell\\n     * @param minETH Minimum ETH to receive (slippage protection)\\n     */\\n    function sellTokens(\\n        uint256 tokenAmount,\\n        uint256 minETH\\n    ) external returns (uint256 ethToReceive, uint256 fee);\\n\\n    /**\\n     * @notice Finalize the curve and create Uniswap pool\\n     * @dev Only callable when bonding target is reached\\n     */\\n    function finalizeCurve() external;\\n}\\n\",\"keccak256\":\"0x3cb9ab3d50d71eb16676f1540979c45b610cfb46a7c773daf865dc974ef0a88b\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IFactory\\n * @notice Interface for the factory contract that deploys token and bonding curve instances\\n * @dev Factory is deployed via minimal proxy pattern and implements Initializable\\n */\\ninterface IFactory {\\n    // Custom Errors\\n    /// @notice Thrown when an address parameter is zero\\n    error ZeroAddress();\\n\\n    /// @notice Thrown when initialization fails\\n    error InitializationFailed();\\n\\n    /// @notice Thrown when caller is not authorized\\n    error Unauthorized();\\n\\n    /// @notice Thrown when deployment fee is insufficient\\n    /// @param provided The amount of ETH provided\\n    /// @param required The required deployment fee\\n    error InsufficientDeploymentFee(uint256 provided, uint256 required);\\n\\n    /// @notice Thrown when deployment parameters are invalid\\n    error InvalidDeploymentParameters();\\n\\n    /// @notice Thrown when deployment minting fails\\n    error TokenMintingFailed();\\n\\n    /// @notice Thrown when deployment extra fees refund fails\\n    error RefundFailed();\\n    error NoFeesToWithdraw();\\n    error FeeWithdrawalFailed();\\n\\n    // Events\\n    /**\\n     * @notice Emitted when a new bonding curve system is deployed\\n     * @param bondingCurveAddress The address of the deployed bonding curve\\n     * @param tokenAddress The address of the deployed token\\n     * @param owner The address that will own both contracts\\n     * @param name Token name\\n     * @param symbol Token symbol\\n     */\\n    event BondingCurveSystemDeployed(\\n        address indexed bondingCurveAddress,\\n        address indexed tokenAddress,\\n        address indexed owner,\\n        string name,\\n        string symbol\\n    );\\n\\n    /**\\n     * @notice Emitted when deployment fee is updated\\n     * @param oldFee Previous fee amount\\n     * @param newFee New fee amount\\n     */\\n    event DeploymentFeeUpdated(uint256 oldFee, uint256 newFee);\\n\\n    /**\\n     * @notice Emitted when fees are withdrawn\\n     * @param recipient Address receiving the fees\\n     * @param amount Amount withdrawn\\n     */\\n    event FeesWithdrawn(address indexed recipient, uint256 amount);\\n\\n    // Add new events\\n    event BondingCurveSettingsUpdated(\\n        uint256 virtualEth,\\n        uint256 preBondingTarget,\\n        uint256 bondingTarget,\\n        uint256 minContribution,\\n        uint24 poolFee\\n    );\\n\\n    struct BondingCurveSettings {\\n        uint256 virtualEth;\\n        uint256 preBondingTarget;\\n        uint256 bondingTarget;\\n        uint256 minContribution;\\n        uint24 poolFee;\\n        uint24 sellFee;\\n        address uniswapV3Factory;\\n        address positionManager;\\n        address weth;\\n        address feeTo;\\n    }\\n\\n    // Add new functions\\n    function getBondingCurveSettings()\\n        external\\n        view\\n        returns (BondingCurveSettings memory);\\n\\n    function updateBondingCurveSettings(\\n        BondingCurveSettings calldata newSettings\\n    ) external;\\n\\n    // View Functions\\n    /**\\n     * @notice Get the current deployment fee\\n     * @return Current fee amount in wei\\n     */\\n    function getDeploymentFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the token implementation address\\n     * @return Address of the token implementation contract\\n     */\\n    function getTokenImplementation() external view returns (address);\\n\\n    /**\\n     * @notice Get the bonding curve implementation address\\n     * @return Address of the bonding curve implementation contract\\n     */\\n    function getBondingCurveImplementation() external view returns (address);\\n\\n    /**\\n     * @notice Get the LP NFT lock contract address\\n     * @return Address of the LP NFT lock contract\\n     */\\n    function getLockContract() external view returns (address);\\n\\n    // State-Changing Functions\\n    /**\\n     * @notice Initialize the factory contract\\n     * @param owner Address that will own the factory\\n     * @param tokenImpl Address of the token implementation\\n     * @param bondingCurveImpl Address of the bonding curve implementation\\n     * @param lockContract Address of the LP NFT lock contract\\n     */\\n    // Update initialize function\\n    function initialize(\\n        uint256 factoryFees,\\n        address owner,\\n        address tokenImpl,\\n        address bondingCurveImpl,\\n        address lockContract,\\n        BondingCurveSettings calldata settings\\n    ) external;\\n\\n    /**\\n     * @notice Deploy a complete bonding curve system (token + bonding curve)\\n     * @param name Token name\\n     * @param symbol Token symbol\\n     * @return tokenAddress Address of the deployed token contract\\n     * @return bondingCurveAddress Address of the deployed bonding curve\\n     */\\n    function deployBondingCurveSystem(\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        payable\\n        returns (address tokenAddress, address bondingCurveAddress);\\n\\n    /**\\n     * @notice Update the deployment fee\\n     * @param newFee New fee amount in wei\\n     */\\n    function updateDeploymentFee(uint256 newFee) external;\\n\\n    /**\\n     * @notice Withdraw collected fees\\n     * @param recipient Address to receive the fees\\n     */\\n    function withdrawFees(address recipient) external;\\n}\\n\",\"keccak256\":\"0x241cb344383f28f7ff9a72cb71bfff6dad2fecedaaa1822aa15962a5351f873b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100d0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161561006e5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100cd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6115ab806100df6000396000f3fe6080604052600436106101025760003560e01c806379ba509711610095578063c70ff3a011610064578063c70ff3a01461039e578063d0c05a92146103be578063e30c3978146103dc578063f1f7c6fc146103f1578063f2fde38b1461040f57600080fd5b806379ba50971461024a5780638da5cb5b1461025f578063a290566814610274578063b2834bb11461036557600080fd5b806355896f9c116100d157806355896f9c14610193578063593726b6146101c6578063709bc7f314610217578063715018a61461023557600080fd5b8063164e68de1461010e578063432c60581461013057806346c549cc14610150578063499200db1461017357600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e6101293660046110c6565b61042f565b005b34801561013c57600080fd5b5061012e61014b366004611103565b61053c565b34801561015c57600080fd5b506003546040519081526020015b60405180910390f35b34801561017f57600080fd5b5061012e61018e366004611120565b610607565b6101a66101a1366004611182565b610654565b604080516001600160a01b0393841681529290911660208301520161016a565b3480156101d257600080fd5b506101ff6101e13660046110c6565b6001600160a01b039081166000908152600d60205260409020541690565b6040516001600160a01b03909116815260200161016a565b34801561022357600080fd5b506000546001600160a01b03166101ff565b34801561024157600080fd5b5061012e610a8d565b34801561025657600080fd5b5061012e610aa1565b34801561026b57600080fd5b506101ff610ae9565b34801561028057600080fd5b506103586040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091525060408051610140810182526004548152600554602082015260065491810191909152600754606082015260085462ffffff8082166080840152630100000082041660a08301526001600160a01b036601000000000000909104811660c0830152600954811660e0830152600a548116610100830152600b541661012082015290565b60405161016a91906111ee565b34801561037157600080fd5b506101ff6103803660046110c6565b6001600160a01b039081166000908152600c60205260409020541690565b3480156103aa57600080fd5b5061012e6103b93660046112a9565b610b1e565b3480156103ca57600080fd5b506002546001600160a01b03166101ff565b3480156103e857600080fd5b506101ff610d67565b3480156103fd57600080fd5b506001546001600160a01b03166101ff565b34801561041b57600080fd5b5061012e61042a3660046110c6565b610d90565b610437610e15565b6001600160a01b03811661045e5760405163d92e233d60e01b815260040160405180910390fd5b47600081900361048157604051630d00db4d60e31b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146104ce576040519150601f19603f3d011682016040523d82523d6000602084013e6104d3565b606091505b50509050806104f457604051620b587d60e91b815260040160405180910390fd5b826001600160a01b03167fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a8360405161052f91815260200190565b60405180910390a2505050565b610544610e15565b806004610551828261136b565b506064905061056282356014611482565b61056c9190611499565b600581905560065411610592576040516308429e4760e31b815260040160405180910390fd5b7fe4565e87b65527c59a6c2aa2549087a9ccc59d3f74601cad058f3c704018150c81356020830135604084013560608501356105d460a08701608088016114bb565b60408051958652602086019490945292840191909152606083015262ffffff16608082015260a00160405180910390a150565b61060f610e15565b600380549082905560408051828152602081018490527fbade80ae0982a2d3106c4f5afa708793d20a9d6441a6440011f99e9f69ad5f3c910160405180910390a15050565b60008061065f610e47565b60035434101561069457600354604051632e1932e360e11b815234600482015260248101919091526044015b60405180910390fd5b84158061069f575082155b156106bd576040516308429e4760e31b815260040160405180910390fd5b6000546106d2906001600160a01b0316610e91565b91506000826001600160a01b0316878787876040516024016106f79493929190611501565b60408051601f198184030181529181526020820180516001600160e01b031663266c45bb60e11b1790525161072c9190611533565b6000604051808303816000865af19150503d8060008114610769576040519150601f19603f3d011682016040523d82523d6000602084013e61076e565b606091505b505090508061079057604051630337323560e31b815260040160405180910390fd5b6001546107a5906001600160a01b0316610e91565b6002546040516301434e2360e21b81526001600160a01b03868116600480840191909152928116602483015233604483015291546064820152600554608482015260065460a482015260075460c482015260085462ffffff80821660e4840152601882901c1661010483015260301c82166101248201526009548216610144820152600a548216610164820152600b54821661018482015291935083169063050d388c906101a401600060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b50506040516001600160a01b038581166024830152600093508616915060440160408051601f198184030181529181526020820180516001600160e01b03166305a950c560e21b179052516108d09190611533565b6000604051808303816000865af19150503d806000811461090d576040519150601f19603f3d011682016040523d82523d6000602084013e610912565b606091505b505090508061093457604051632907f5df60e11b815260040160405180910390fd5b6001600160a01b038085166000818152600c6020908152604080832080549589166001600160a01b031996871681179091558352600d9091529020805490921617905561097e3390565b6001600160a01b0316846001600160a01b0316846001600160a01b03167f3ef4c1f0529a2ee6b2e04f4f81ace41250f87a6d1ecc603d9168c55780c890fb8b8b8b8b6040516109d09493929190611501565b60405180910390a4600354341115610a595760035460009033906109f49034611562565b604051600081818185875af1925050503d8060008114610a30576040519150601f19603f3d011682016040523d82523d6000602084013e610a35565b606091505b5050905080610a5757604051633c31275160e21b815260040160405180910390fd5b505b5050610a8460017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b94509492505050565b610a95610e15565b610a9f6000610eca565b565b3380610aab610d67565b6001600160a01b031614610add5760405163118cdaa760e01b81526001600160a01b038216600482015260240161068b565b610ae681610eca565b50565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b645750825b905060008267ffffffffffffffff166001148015610b815750303b155b905081158015610b8f575080155b15610bad5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610bd757845460ff60401b1916600160401b1785555b6001600160a01b038a16610bfe5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038916610c255760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038816610c4c5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038716610c735760405163d92e233d60e01b815260040160405180910390fd5b610c7c8a610f06565b610c84610f17565b600080546001600160a01b03808c166001600160a01b031992831617909255600180548b841690831617905560028054928a1692909116919091179055856004610cce828261136b565b5060649050610cdf87356014611482565b610ce99190611499565b600581905560065411610d0f576040516308429e4760e31b815260040160405180910390fd5b60038b90558315610d5a57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610b0e565b610d98610e15565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255610ddc610ae9565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b33610e1e610ae9565b6001600160a01b031614610a9f5760405163118cdaa760e01b815233600482015260240161068b565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610e8b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000610e9e826000610f27565b92915050565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610f0282610fbd565b5050565b610f0e61102e565b610ae681611077565b610f1f61102e565b610a9f6110a9565b600081471015610f535760405163cf47918160e01b81524760048201526024810183905260440161068b565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b038116610e9e5760405163b06ebf3d60e01b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a9f57604051631afcd79f60e31b815260040160405180910390fd5b61107f61102e565b6001600160a01b038116610add57604051631e4fbdf760e01b81526000600482015260240161068b565b610ea461102e565b6001600160a01b0381168114610ae657600080fd5b6000602082840312156110d857600080fd5b81356110e3816110b1565b9392505050565b600061014082840312156110fd57600080fd5b50919050565b6000610140828403121561111657600080fd5b6110e383836110ea565b60006020828403121561113257600080fd5b5035919050565b60008083601f84011261114b57600080fd5b50813567ffffffffffffffff81111561116357600080fd5b60208301915083602082850101111561117b57600080fd5b9250929050565b6000806000806040858703121561119857600080fd5b843567ffffffffffffffff808211156111b057600080fd5b6111bc88838901611139565b909650945060208701359150808211156111d557600080fd5b506111e287828801611139565b95989497509550505050565b60006101408201905082518252602083015160208301526040830151604083015260608301516060830152608083015161122f608084018262ffffff169052565b5060a083015161124660a084018262ffffff169052565b5060c083015161126160c08401826001600160a01b03169052565b5060e083015161127c60e08401826001600160a01b03169052565b50610100838101516001600160a01b03908116918401919091526101209384015116929091019190915290565b6000806000806000806101e087890312156112c357600080fd5b8635955060208701356112d5816110b1565b945060408701356112e5816110b1565b935060608701356112f5816110b1565b92506080870135611305816110b1565b91506113148860a089016110ea565b90509295509295509295565b62ffffff81168114610ae657600080fd5b60008135610e9e81611320565b60008135610e9e816110b1565b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013560018201556040820135600282015560608201356003820155600481016113b56113a060808501611331565b825462ffffff191662ffffff91909116178255565b6113e26113c460a08501611331565b825465ffffff000000191660189190911b65ffffff00000016178255565b6114216113f160c0850161133e565b8280546601000000000000600160d01b03191660309290921b6601000000000000600160d01b0316919091179055565b5061143a61143160e0840161133e565b6005830161134b565b61145361144a610100840161133e565b6006830161134b565b610f02611463610120840161133e565b6007830161134b565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610e9e57610e9e61146c565b6000826114b657634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156114cd57600080fd5b81356110e381611320565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006115156040830186886114d8565b82810360208401526115288185876114d8565b979650505050505050565b6000825160005b81811015611554576020818601810151858301520161153a565b506000920191825250919050565b81810381811115610e9e57610e9e61146c56fea2646970667358221220e73a5ae4186fea1054b4a8ab1b896b6ece62f2a7379b8f18016d9ee014e6521164736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c806379ba509711610095578063c70ff3a011610064578063c70ff3a01461039e578063d0c05a92146103be578063e30c3978146103dc578063f1f7c6fc146103f1578063f2fde38b1461040f57600080fd5b806379ba50971461024a5780638da5cb5b1461025f578063a290566814610274578063b2834bb11461036557600080fd5b806355896f9c116100d157806355896f9c14610193578063593726b6146101c6578063709bc7f314610217578063715018a61461023557600080fd5b8063164e68de1461010e578063432c60581461013057806346c549cc14610150578063499200db1461017357600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e6101293660046110c6565b61042f565b005b34801561013c57600080fd5b5061012e61014b366004611103565b61053c565b34801561015c57600080fd5b506003546040519081526020015b60405180910390f35b34801561017f57600080fd5b5061012e61018e366004611120565b610607565b6101a66101a1366004611182565b610654565b604080516001600160a01b0393841681529290911660208301520161016a565b3480156101d257600080fd5b506101ff6101e13660046110c6565b6001600160a01b039081166000908152600d60205260409020541690565b6040516001600160a01b03909116815260200161016a565b34801561022357600080fd5b506000546001600160a01b03166101ff565b34801561024157600080fd5b5061012e610a8d565b34801561025657600080fd5b5061012e610aa1565b34801561026b57600080fd5b506101ff610ae9565b34801561028057600080fd5b506103586040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091525060408051610140810182526004548152600554602082015260065491810191909152600754606082015260085462ffffff8082166080840152630100000082041660a08301526001600160a01b036601000000000000909104811660c0830152600954811660e0830152600a548116610100830152600b541661012082015290565b60405161016a91906111ee565b34801561037157600080fd5b506101ff6103803660046110c6565b6001600160a01b039081166000908152600c60205260409020541690565b3480156103aa57600080fd5b5061012e6103b93660046112a9565b610b1e565b3480156103ca57600080fd5b506002546001600160a01b03166101ff565b3480156103e857600080fd5b506101ff610d67565b3480156103fd57600080fd5b506001546001600160a01b03166101ff565b34801561041b57600080fd5b5061012e61042a3660046110c6565b610d90565b610437610e15565b6001600160a01b03811661045e5760405163d92e233d60e01b815260040160405180910390fd5b47600081900361048157604051630d00db4d60e31b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146104ce576040519150601f19603f3d011682016040523d82523d6000602084013e6104d3565b606091505b50509050806104f457604051620b587d60e91b815260040160405180910390fd5b826001600160a01b03167fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a8360405161052f91815260200190565b60405180910390a2505050565b610544610e15565b806004610551828261136b565b506064905061056282356014611482565b61056c9190611499565b600581905560065411610592576040516308429e4760e31b815260040160405180910390fd5b7fe4565e87b65527c59a6c2aa2549087a9ccc59d3f74601cad058f3c704018150c81356020830135604084013560608501356105d460a08701608088016114bb565b60408051958652602086019490945292840191909152606083015262ffffff16608082015260a00160405180910390a150565b61060f610e15565b600380549082905560408051828152602081018490527fbade80ae0982a2d3106c4f5afa708793d20a9d6441a6440011f99e9f69ad5f3c910160405180910390a15050565b60008061065f610e47565b60035434101561069457600354604051632e1932e360e11b815234600482015260248101919091526044015b60405180910390fd5b84158061069f575082155b156106bd576040516308429e4760e31b815260040160405180910390fd5b6000546106d2906001600160a01b0316610e91565b91506000826001600160a01b0316878787876040516024016106f79493929190611501565b60408051601f198184030181529181526020820180516001600160e01b031663266c45bb60e11b1790525161072c9190611533565b6000604051808303816000865af19150503d8060008114610769576040519150601f19603f3d011682016040523d82523d6000602084013e61076e565b606091505b505090508061079057604051630337323560e31b815260040160405180910390fd5b6001546107a5906001600160a01b0316610e91565b6002546040516301434e2360e21b81526001600160a01b03868116600480840191909152928116602483015233604483015291546064820152600554608482015260065460a482015260075460c482015260085462ffffff80821660e4840152601882901c1661010483015260301c82166101248201526009548216610144820152600a548216610164820152600b54821661018482015291935083169063050d388c906101a401600060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b50506040516001600160a01b038581166024830152600093508616915060440160408051601f198184030181529181526020820180516001600160e01b03166305a950c560e21b179052516108d09190611533565b6000604051808303816000865af19150503d806000811461090d576040519150601f19603f3d011682016040523d82523d6000602084013e610912565b606091505b505090508061093457604051632907f5df60e11b815260040160405180910390fd5b6001600160a01b038085166000818152600c6020908152604080832080549589166001600160a01b031996871681179091558352600d9091529020805490921617905561097e3390565b6001600160a01b0316846001600160a01b0316846001600160a01b03167f3ef4c1f0529a2ee6b2e04f4f81ace41250f87a6d1ecc603d9168c55780c890fb8b8b8b8b6040516109d09493929190611501565b60405180910390a4600354341115610a595760035460009033906109f49034611562565b604051600081818185875af1925050503d8060008114610a30576040519150601f19603f3d011682016040523d82523d6000602084013e610a35565b606091505b5050905080610a5757604051633c31275160e21b815260040160405180910390fd5b505b5050610a8460017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b94509492505050565b610a95610e15565b610a9f6000610eca565b565b3380610aab610d67565b6001600160a01b031614610add5760405163118cdaa760e01b81526001600160a01b038216600482015260240161068b565b610ae681610eca565b50565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b645750825b905060008267ffffffffffffffff166001148015610b815750303b155b905081158015610b8f575080155b15610bad5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610bd757845460ff60401b1916600160401b1785555b6001600160a01b038a16610bfe5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038916610c255760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038816610c4c5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038716610c735760405163d92e233d60e01b815260040160405180910390fd5b610c7c8a610f06565b610c84610f17565b600080546001600160a01b03808c166001600160a01b031992831617909255600180548b841690831617905560028054928a1692909116919091179055856004610cce828261136b565b5060649050610cdf87356014611482565b610ce99190611499565b600581905560065411610d0f576040516308429e4760e31b815260040160405180910390fd5b60038b90558315610d5a57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610b0e565b610d98610e15565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255610ddc610ae9565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b33610e1e610ae9565b6001600160a01b031614610a9f5760405163118cdaa760e01b815233600482015260240161068b565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610e8b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000610e9e826000610f27565b92915050565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610f0282610fbd565b5050565b610f0e61102e565b610ae681611077565b610f1f61102e565b610a9f6110a9565b600081471015610f535760405163cf47918160e01b81524760048201526024810183905260440161068b565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b038116610e9e5760405163b06ebf3d60e01b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a9f57604051631afcd79f60e31b815260040160405180910390fd5b61107f61102e565b6001600160a01b038116610add57604051631e4fbdf760e01b81526000600482015260240161068b565b610ea461102e565b6001600160a01b0381168114610ae657600080fd5b6000602082840312156110d857600080fd5b81356110e3816110b1565b9392505050565b600061014082840312156110fd57600080fd5b50919050565b6000610140828403121561111657600080fd5b6110e383836110ea565b60006020828403121561113257600080fd5b5035919050565b60008083601f84011261114b57600080fd5b50813567ffffffffffffffff81111561116357600080fd5b60208301915083602082850101111561117b57600080fd5b9250929050565b6000806000806040858703121561119857600080fd5b843567ffffffffffffffff808211156111b057600080fd5b6111bc88838901611139565b909650945060208701359150808211156111d557600080fd5b506111e287828801611139565b95989497509550505050565b60006101408201905082518252602083015160208301526040830151604083015260608301516060830152608083015161122f608084018262ffffff169052565b5060a083015161124660a084018262ffffff169052565b5060c083015161126160c08401826001600160a01b03169052565b5060e083015161127c60e08401826001600160a01b03169052565b50610100838101516001600160a01b03908116918401919091526101209384015116929091019190915290565b6000806000806000806101e087890312156112c357600080fd5b8635955060208701356112d5816110b1565b945060408701356112e5816110b1565b935060608701356112f5816110b1565b92506080870135611305816110b1565b91506113148860a089016110ea565b90509295509295509295565b62ffffff81168114610ae657600080fd5b60008135610e9e81611320565b60008135610e9e816110b1565b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013560018201556040820135600282015560608201356003820155600481016113b56113a060808501611331565b825462ffffff191662ffffff91909116178255565b6113e26113c460a08501611331565b825465ffffff000000191660189190911b65ffffff00000016178255565b6114216113f160c0850161133e565b8280546601000000000000600160d01b03191660309290921b6601000000000000600160d01b0316919091179055565b5061143a61143160e0840161133e565b6005830161134b565b61145361144a610100840161133e565b6006830161134b565b610f02611463610120840161133e565b6007830161134b565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610e9e57610e9e61146c565b6000826114b657634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156114cd57600080fd5b81356110e381611320565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006115156040830186886114d8565b82810360208401526115288185876114d8565b979650505050505050565b6000825160005b81811015611554576020818601810151858301520161153a565b506000920191825250919050565b81810381811115610e9e57610e9e61146c56fea2646970667358221220e73a5ae4186fea1054b4a8ab1b896b6ece62f2a7379b8f18016d9ee014e6521164736f6c63430008140033",
  "devdoc": {
    "details": "Implements minimal proxy pattern for gas-efficient deployment",
    "errors": {
      "FailedDeployment()": [
        {
          "details": "The deployment failed."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "InsufficientDeploymentFee(uint256,uint256)": [
        {
          "params": {
            "provided": "The amount of ETH provided",
            "required": "The required deployment fee"
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "BondingCurveSystemDeployed(address,address,address,string,string)": {
        "params": {
          "bondingCurveAddress": "The address of the deployed bonding curve",
          "name": "Token name",
          "owner": "The address that will own both contracts",
          "symbol": "Token symbol",
          "tokenAddress": "The address of the deployed token"
        }
      },
      "DeploymentFeeUpdated(uint256,uint256)": {
        "params": {
          "newFee": "New fee amount",
          "oldFee": "Previous fee amount"
        }
      },
      "FeesWithdrawn(address,uint256)": {
        "params": {
          "amount": "Amount withdrawn",
          "recipient": "Address receiving the fees"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "details": "Constructor is disabled since this contract is meant to be used behind a proxy"
      },
      "deployBondingCurveSystem(string,string)": {
        "params": {
          "name": "Token name",
          "symbol": "Token symbol"
        },
        "returns": {
          "bondingCurveAddress": "Address of the deployed bonding curve",
          "tokenAddress": "Address of the deployed token contract"
        }
      },
      "getBondingCurveForToken(address)": {
        "params": {
          "token": "The token address to query"
        },
        "returns": {
          "_0": "The associated bonding curve address"
        }
      },
      "getBondingCurveImplementation()": {
        "returns": {
          "_0": "Address of the bonding curve implementation contract"
        }
      },
      "getDeploymentFee()": {
        "returns": {
          "_0": "Current fee amount in wei"
        }
      },
      "getLockContract()": {
        "returns": {
          "_0": "Address of the LP NFT lock contract"
        }
      },
      "getTokenForBondingCurve(address)": {
        "params": {
          "bondingCurve": "The bonding curve address to query"
        },
        "returns": {
          "_0": "The associated token address"
        }
      },
      "getTokenImplementation()": {
        "returns": {
          "_0": "Address of the token implementation contract"
        }
      },
      "initialize(uint256,address,address,address,address,(uint256,uint256,uint256,uint256,uint24,uint24,address,address,address,address))": {
        "params": {
          "bondingCurveImpl": "Address of the bonding curve implementation",
          "lockContract": "Address of the LP NFT lock contract",
          "owner": "Address that will own the factory",
          "tokenImpl": "Address of the token implementation"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
      },
      "updateDeploymentFee(uint256)": {
        "params": {
          "newFee": "New fee amount in wei"
        }
      },
      "withdrawFees(address)": {
        "params": {
          "recipient": "Address to receive the fees"
        }
      }
    },
    "title": "Factory",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InitializationFailed()": [
        {
          "notice": "Thrown when initialization fails"
        }
      ],
      "InsufficientDeploymentFee(uint256,uint256)": [
        {
          "notice": "Thrown when deployment fee is insufficient"
        }
      ],
      "InvalidDeploymentParameters()": [
        {
          "notice": "Thrown when deployment parameters are invalid"
        }
      ],
      "RefundFailed()": [
        {
          "notice": "Thrown when deployment extra fees refund fails"
        }
      ],
      "TokenMintingFailed()": [
        {
          "notice": "Thrown when deployment minting fails"
        }
      ],
      "Unauthorized()": [
        {
          "notice": "Thrown when caller is not authorized"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Thrown when an address parameter is zero"
        }
      ]
    },
    "events": {
      "BondingCurveSystemDeployed(address,address,address,string,string)": {
        "notice": "Emitted when a new bonding curve system is deployed"
      },
      "DeploymentFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when deployment fee is updated"
      },
      "FeesWithdrawn(address,uint256)": {
        "notice": "Emitted when fees are withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "deployBondingCurveSystem(string,string)": {
        "notice": "Deploy a complete bonding curve system (token + bonding curve)"
      },
      "getBondingCurveForToken(address)": {
        "notice": "Get the bonding curve address associated with a token"
      },
      "getBondingCurveImplementation()": {
        "notice": "Get the bonding curve implementation address"
      },
      "getDeploymentFee()": {
        "notice": "Get the current deployment fee"
      },
      "getLockContract()": {
        "notice": "Get the LP NFT lock contract address"
      },
      "getTokenForBondingCurve(address)": {
        "notice": "Get the token address associated with a bonding curve"
      },
      "getTokenImplementation()": {
        "notice": "Get the token implementation address"
      },
      "initialize(uint256,address,address,address,address,(uint256,uint256,uint256,uint256,uint24,uint24,address,address,address,address))": {
        "notice": "Initialize the factory contract"
      },
      "updateDeploymentFee(uint256)": {
        "notice": "Update the deployment fee"
      },
      "withdrawFees(address)": {
        "notice": "Withdraw collected fees"
      }
    },
    "notice": "Factory contract for deploying bonding curve systems",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9337,
        "contract": "contracts/Factory.sol:Factory",
        "label": "tokenImplementation",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9339,
        "contract": "contracts/Factory.sol:Factory",
        "label": "bondingCurveImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9341,
        "contract": "contracts/Factory.sol:Factory",
        "label": "lockContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9343,
        "contract": "contracts/Factory.sol:Factory",
        "label": "deploymentFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9346,
        "contract": "contracts/Factory.sol:Factory",
        "label": "settings",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(BondingCurveSettings)11201_storage"
      },
      {
        "astId": 9350,
        "contract": "contracts/Factory.sol:Factory",
        "label": "tokenToBondingCurve",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9354,
        "contract": "contracts/Factory.sol:Factory",
        "label": "bondingCurveToToken",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(BondingCurveSettings)11201_storage": {
        "encoding": "inplace",
        "label": "struct IFactory.BondingCurveSettings",
        "members": [
          {
            "astId": 11182,
            "contract": "contracts/Factory.sol:Factory",
            "label": "virtualEth",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11184,
            "contract": "contracts/Factory.sol:Factory",
            "label": "preBondingTarget",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11186,
            "contract": "contracts/Factory.sol:Factory",
            "label": "bondingTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11188,
            "contract": "contracts/Factory.sol:Factory",
            "label": "minContribution",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11190,
            "contract": "contracts/Factory.sol:Factory",
            "label": "poolFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint24"
          },
          {
            "astId": 11192,
            "contract": "contracts/Factory.sol:Factory",
            "label": "sellFee",
            "offset": 3,
            "slot": "4",
            "type": "t_uint24"
          },
          {
            "astId": 11194,
            "contract": "contracts/Factory.sol:Factory",
            "label": "uniswapV3Factory",
            "offset": 6,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11196,
            "contract": "contracts/Factory.sol:Factory",
            "label": "positionManager",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 11198,
            "contract": "contracts/Factory.sol:Factory",
            "label": "weth",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 11200,
            "contract": "contracts/Factory.sol:Factory",
            "label": "feeTo",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}